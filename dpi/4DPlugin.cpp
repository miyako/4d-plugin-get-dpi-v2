/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : DPI
 #	author : miyako
 #	2018/12/20
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- DPI

		case 1 :
			Get_system_DPI(pResult, pParams);
			break;

	}
}

// -------------------------------------- DPI -------------------------------------

#define DPI_RATIO 0
#define DPI_VALUE 1

#if VERSIONWIN
#include <versionhelpers.h>
#endif

void Get_system_DPI(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

#if VERSIONWIN
    if (IsWindows10OrGreater())
    {
        DPI_AWARENESS_CONTEXT ctx = GetThreadDpiAwarenessContext();
        SetThreadDpiAwarenessContext(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE);
        UINT dpi = GetDpiForSystem();
        SetThreadDpiAwarenessContext(ctx);
        
        switch (Param1.getIntValue())
        {
            case DPI_VALUE:
                returnValue.setIntValue(dpi);
                break;
            case DPI_RATIO:
            default:
                returnValue.setIntValue(((double)dpi / USER_DEFAULT_SCREEN_DPI) * 100);
                break;
        }
    }
#endif
    
	returnValue.setReturn(pResult);
}

